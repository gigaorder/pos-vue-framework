//12 column grid using flex box
.row-flex {
  display: flex;
  flex-direction: row;
}

.row-reverse {
  display: flex;
  flex-direction: row-reverse;
}

.col-flex {
  display: flex;
  flex-direction: column;
}

.col-reverse {
  display: flex;
  flex-direction: column-reverse;
}

@for $i from 1 through $grid-columns {
  .col-#{$i} {
    flex: 0 0 percentage($i/$grid-columns);
    max-width: percentage($i/$grid-columns);
  }
}

@each $size, $width in $grid-breakpoints {
  @if $width != 0 {
    @media (min-width: $width) {
      .col-#{$size} {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
      }
      .col-#{$size}-auto {
        flex: 0 0 auto;
        width: auto;
        max-width: 100%;
      }
      @for $i from 1 through $grid-columns {
        .col-#{$size}-#{$i} {
          flex: 0 0 percentage($i/$grid-columns);
          max-width: percentage($i/$grid-columns);
        }
      }
    }
  }
}

@media (max-width: 600px) {
  .col-xs {
    flex-basis: 0;
    flex-grow: 1;
    max-width: 100%;
  }
  .col-xs-auto {
    flex: 0 0 auto;
    width: auto;
    max-width: 100%;
  }
  @for $i from 1 through $grid-columns {
    .col-xs-#{$i} {
      flex: 0 0 percentage($i/$grid-columns);
      max-width: percentage($i/$grid-columns);
    }
  }
}


@for $i from 1 through $grid-columns {
  .offset-#{$i} {
    margin-left: percentage($i/$grid-columns);
  }
}

@each $size, $width in $grid-breakpoints {
  @if $width != 0 {
    @media (min-width: $width) {
      @for $i from 1 through $grid-columns {
        .offset-#{$size}-#{$i} {
          margin-left: percentage($i/$grid-columns);
        }
      }
    }
  }
}

@media (max-width: 600px) {
  @for $i from 1 through $grid-columns {
    .offset-xs-#{$i} {
      margin-left: percentage($i/$grid-columns);
    }
  }
}

@for $i from 1 through $grid-columns {
  .row-#{$i} {
    flex: 0 0 percentage($i/$grid-columns);
    max-height: percentage($i/$grid-columns);
  }
}

.flex-equal {
  flex: 1 1 0;
}

.flex-auto {
  flex: 1 1 auto;
}

.flex-wrap {
  flex-wrap: wrap;
}

.flex-nowrap {
  flex-wrap: nowrap;
}

.flex-grow-0 {
  flex-grow: 0;
}

.flex-grow-1 {
  flex-grow: 1;
}

.flex-shrink-0 {
  flex-shrink: 0;
}

.flex-shrink-1 {
  flex-shrink: 1;
}

.align-items-start {
  align-items: flex-start;
}

.align-items-end {
  align-items: flex-end;
}

.align-items-center {
  align-items: center;
}

.align-items-baseline {
  align-items: baseline;
}

.align-items-stretch {
  align-items: stretch;
}

.justify-items-start {
  justify-items: flex-start;
}

.justify-items-end {
  justify-items: flex-end;
}

.justify-items-center {
  justify-items: center;
}

.justify-items-baseline {
  justify-items: baseline;
}

.justify-items-stretch {
  justify-items: stretch;
}

.self-start {
  align-self: flex-start;
}

.self-end {
  align-self: flex-end;
}

.self-center {
  align-self: center;
}

.self-baseline {
  align-self: baseline;
}

.self-stretch {
  align-self: stretch;
}

.justify-start {
  justify-content: flex-start;
}

.justify-end {
  justify-content: flex-end;
}

.justify-center {
  justify-content: center;
}

.justify-between {
  justify-content: space-between;
}

.justify-around {
  justify-content: space-around;
}

.content-start {
  align-content: flex-start;
}

.content-end {
  align-content: flex-end;
}

.content-center {
  align-content: center;
}

.content-between {
  align-content: space-between;
}

.content-around {
  align-content: space-around;
}

.content-stretch {
  align-content: stretch;
}